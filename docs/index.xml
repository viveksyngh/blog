<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vivek Kumar Singh</title>
    <link>http://www.viveksyngh.info/blog/</link>
    <description>Recent content on Vivek Kumar Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Feb 2018 17:46:10 +0530</lastBuildDate>
    
	<atom:link href="http://www.viveksyngh.info/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install Docker on Ubuntu</title>
      <link>http://www.viveksyngh.info/blog/install-docker-on-ubuntu/</link>
      <pubDate>Tue, 20 Feb 2018 17:46:10 +0530</pubDate>
      
      <guid>http://www.viveksyngh.info/blog/install-docker-on-ubuntu/</guid>
      <description>In this blog post, I am going to show how to install docker on ubuntu 16.04. We will install community edition of docker.
 Update the apt package index:
$ sudo apt-get update  Install packages to allow apt to use a repository over HTTPS:
$ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ software-properties-common  Add Docker&amp;rsquo;s official GPG key:
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  Verify the key fingerprint, It should match with 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</description>
    </item>
    
    <item>
      <title>Http Response in Golang</title>
      <link>http://www.viveksyngh.info/blog/http-response-in-go/</link>
      <pubDate>Sat, 17 Feb 2018 11:49:41 +0530</pubDate>
      
      <guid>http://www.viveksyngh.info/blog/http-response-in-go/</guid>
      <description>In this blog post, I am going to talk about HTTP server and how to respond with different types of HTTP response(text, JSON, template) in Go.
Creating a web server in Go is very simple and we can do it by writing just a few lines of code. To create an HTTP server in go you need to use net/http package. This is how a simple HTTP server code looks like in Go.</description>
    </item>
    
    <item>
      <title>Download a file from URL in Python</title>
      <link>http://www.viveksyngh.info/blog/download-file-from-url-python/</link>
      <pubDate>Sat, 03 Feb 2018 01:05:59 +0530</pubDate>
      
      <guid>http://www.viveksyngh.info/blog/download-file-from-url-python/</guid>
      <description>This blog post is about how to download an image or other static content from a URL in python.
I am going to accomplish this without any additional python package. We will look at two different solutions for Python2 and Python3. So Letâ€™s get started.
Before we start downloading the file, we need to get the filename from the URL. The string after the last backslash in URL is the filename.</description>
    </item>
    
  </channel>
</rss>