<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Vivek Kumar Singh</title>
    <link>https://www.viveksyngh.info/blog/categories/golang/</link>
    <description>Recent content in Golang on Vivek Kumar Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Aug 2018 16:47:16 +0530</lastBuildDate>
    
	<atom:link href="https://www.viveksyngh.info/blog/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Timeout Commands in Go</title>
      <link>https://www.viveksyngh.info/blog/timeout-command-in-go/</link>
      <pubDate>Tue, 28 Aug 2018 16:47:16 +0530</pubDate>
      
      <guid>https://www.viveksyngh.info/blog/timeout-command-in-go/</guid>
      <description>Sometimes in our applications, we need to invoke external processes or commands (e.g CURL, Ping, SSH etc.) to perform some tasks. We can use os/exec Go package to invoke external processes. Most of the time we want to invoke these commands with timeouts.Â In this blog post, I am going to talk about the different ways in which we can invoke a command with a timeout.
Timeout with timer In this method, we will use a timer for the timeout.</description>
    </item>
    
    <item>
      <title>Http Response in Golang</title>
      <link>https://www.viveksyngh.info/blog/http-response-in-go/</link>
      <pubDate>Sat, 17 Feb 2018 11:49:41 +0530</pubDate>
      
      <guid>https://www.viveksyngh.info/blog/http-response-in-go/</guid>
      <description>In this blog post, I am going to talk about HTTP server and how to respond with different types of HTTP response(text, JSON, template) in Go.
Creating a web server in Go is very simple and we can do it by writing just a few lines of code. To create an HTTP server in go you need to use net/http package. This is how a simple HTTP server code looks like in Go.</description>
    </item>
    
  </channel>
</rss>