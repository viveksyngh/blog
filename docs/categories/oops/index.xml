<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oops on Vivek Kumar Singh</title>
    <link>https://www.viveksyngh.info/blog/categories/oops/</link>
    <description>Recent content in Oops on Vivek Kumar Singh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Oct 2018 23:55:32 +0530</lastBuildDate>
    
	<atom:link href="https://www.viveksyngh.info/blog/categories/oops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting started with Golang interfaces</title>
      <link>https://www.viveksyngh.info/blog/getting-started-with-golang-interfaces/</link>
      <pubDate>Wed, 17 Oct 2018 23:55:32 +0530</pubDate>
      
      <guid>https://www.viveksyngh.info/blog/getting-started-with-golang-interfaces/</guid>
      <description>Interfaces in Go provides a way to specify the behavior of an object. Interfaces allow us to write more flexible and scalable code in Go. It is also a mechanism to achieve polymorphism in Go.
type Interface interface { Method1(int, string) (int, error) Method2(int) bool Method3(string) }  Interfaces specify methods (or behavior) but do not provide an implementation for those methods. Types implementing the interface provide an implementation of methods.</description>
    </item>
    
  </channel>
</rss>